{
  "version": 3,
  "sources": ["../../tinymce/plugins/autosave/plugin.js", "../../tinymce/plugins/autosave/index.js", "dep:tinymce_plugins_autosave"],
  "sourcesContent": ["/**\n * TinyMCE version 6.2.0 (2022-09-08)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType = type => value => typeOf(value) === type;\n    const eq = t => a => t === a;\n    const isString = isType('string');\n    const isUndefined = eq(undefined);\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const fireRestoreDraft = editor => editor.dispatch('RestoreDraft');\n    const fireStoreDraft = editor => editor.dispatch('StoreDraft');\n    const fireRemoveDraft = editor => editor.dispatch('RemoveDraft');\n\n    const parse = timeString => {\n      const multiples = {\n        s: 1000,\n        m: 60000\n      };\n      const parsedTime = /^(\\d+)([ms]?)$/.exec(timeString);\n      return (parsedTime && parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(timeString, 10);\n    };\n\n    const option = name => editor => editor.options.get(name);\n    const register$1 = editor => {\n      const registerOption = editor.options.register;\n      const timeProcessor = value => {\n        const valid = isString(value);\n        if (valid) {\n          return {\n            value: parse(value),\n            valid\n          };\n        } else {\n          return {\n            valid: false,\n            message: 'Must be a string.'\n          };\n        }\n      };\n      registerOption('autosave_ask_before_unload', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('autosave_prefix', {\n        processor: 'string',\n        default: 'tinymce-autosave-{path}{query}{hash}-{id}-'\n      });\n      registerOption('autosave_restore_when_empty', {\n        processor: 'boolean',\n        default: false\n      });\n      registerOption('autosave_interval', {\n        processor: timeProcessor,\n        default: '30s'\n      });\n      registerOption('autosave_retention', {\n        processor: timeProcessor,\n        default: '20m'\n      });\n    };\n    const shouldAskBeforeUnload = option('autosave_ask_before_unload');\n    const shouldRestoreWhenEmpty = option('autosave_restore_when_empty');\n    const getAutoSaveInterval = option('autosave_interval');\n    const getAutoSaveRetention = option('autosave_retention');\n    const getAutoSavePrefix = editor => {\n      const location = document.location;\n      return editor.options.get('autosave_prefix').replace(/{path}/g, location.pathname).replace(/{query}/g, location.search).replace(/{hash}/g, location.hash).replace(/{id}/g, editor.id);\n    };\n\n    const isEmpty = (editor, html) => {\n      if (isUndefined(html)) {\n        return editor.dom.isEmpty(editor.getBody());\n      } else {\n        const trimmedHtml = global$1.trim(html);\n        if (trimmedHtml === '') {\n          return true;\n        } else {\n          const fragment = new DOMParser().parseFromString(trimmedHtml, 'text/html');\n          return editor.dom.isEmpty(fragment);\n        }\n      }\n    };\n    const hasDraft = editor => {\n      var _a;\n      const time = parseInt((_a = global$2.getItem(getAutoSavePrefix(editor) + 'time')) !== null && _a !== void 0 ? _a : '0', 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    const removeDraft = (editor, fire) => {\n      const prefix = getAutoSavePrefix(editor);\n      global$2.removeItem(prefix + 'draft');\n      global$2.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    const storeDraft = editor => {\n      const prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$2.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$2.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    const restoreDraft = editor => {\n      var _a;\n      const prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent((_a = global$2.getItem(prefix + 'draft')) !== null && _a !== void 0 ? _a : '', { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    const startStoreDraft = editor => {\n      const interval = getAutoSaveInterval(editor);\n      global$3.setEditorInterval(editor, () => {\n        storeDraft(editor);\n      }, interval);\n    };\n    const restoreLastDraft = editor => {\n      editor.undoManager.transact(() => {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    const get = editor => ({\n      hasDraft: () => hasDraft(editor),\n      storeDraft: () => storeDraft(editor),\n      restoreDraft: () => restoreDraft(editor),\n      removeDraft: fire => removeDraft(editor, fire),\n      isEmpty: html => isEmpty(editor, html)\n    });\n\n    var global = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    const setup = editor => {\n      editor.editorManager.on('BeforeUnload', e => {\n        let msg;\n        global$1.each(global.get(), editor => {\n          if (editor.plugins.autosave) {\n            editor.plugins.autosave.storeDraft();\n          }\n          if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n            msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n          }\n        });\n        if (msg) {\n          e.preventDefault();\n          e.returnValue = msg;\n        }\n      });\n    };\n\n    const makeSetupHandler = editor => api => {\n      api.setEnabled(hasDraft(editor));\n      const editorEventCallback = () => api.setEnabled(hasDraft(editor));\n      editor.on('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n      return () => editor.off('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n    };\n    const register = editor => {\n      startStoreDraft(editor);\n      const onAction = () => {\n        restoreLastDraft(editor);\n      };\n      editor.ui.registry.addButton('restoredraft', {\n        tooltip: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction,\n        onSetup: makeSetupHandler(editor)\n      });\n      editor.ui.registry.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction,\n        onSetup: makeSetupHandler(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$4.add('autosave', editor => {\n        register$1(editor);\n        setup(editor);\n        register(editor);\n        editor.on('init', () => {\n          if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n            restoreDraft(editor);\n          }\n        });\n        return get(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n", "// Exports the \"autosave\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autosave')\n//   ES2015:\n//     import 'tinymce/plugins/autosave'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/autosave/index.js\");"],
  "mappings": "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",
  "names": ["editor"]
}
