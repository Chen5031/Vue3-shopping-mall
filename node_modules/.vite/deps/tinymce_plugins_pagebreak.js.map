{
  "version": 3,
  "sources": ["../../tinymce/plugins/pagebreak/plugin.js", "../../tinymce/plugins/pagebreak/index.js", "dep:tinymce_plugins_pagebreak"],
  "sourcesContent": ["/**\n * TinyMCE version 6.2.0 (2022-09-08)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('pagebreak_separator', {\n        processor: 'string',\n        default: '<!-- pagebreak -->'\n      });\n      registerOption('pagebreak_split_block', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const getSeparatorHtml = option('pagebreak_separator');\n    const shouldSplitBlock = option('pagebreak_split_block');\n\n    const pageBreakClass = 'mce-pagebreak';\n    const getPlaceholderHtml = shouldSplitBlock => {\n      const html = `<img src=\"${ global.transparentSrc }\" class=\"${ pageBreakClass }\" data-mce-resize=\"false\" data-mce-placeholder />`;\n      return shouldSplitBlock ? `<p>${ html }</p>` : html;\n    };\n    const setup$1 = editor => {\n      const separatorHtml = getSeparatorHtml(editor);\n      const shouldSplitBlock$1 = () => shouldSplitBlock(editor);\n      const pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\\?\\.\\*\\[\\]\\(\\)\\{\\}\\+\\^\\$\\:]/g, a => {\n        return '\\\\' + a;\n      }), 'gi');\n      editor.on('BeforeSetContent', e => {\n        e.content = e.content.replace(pageBreakSeparatorRegExp, getPlaceholderHtml(shouldSplitBlock$1()));\n      });\n      editor.on('PreInit', () => {\n        editor.serializer.addNodeFilter('img', nodes => {\n          let i = nodes.length, node, className;\n          while (i--) {\n            node = nodes[i];\n            className = node.attr('class');\n            if (className && className.indexOf(pageBreakClass) !== -1) {\n              const parentNode = node.parent;\n              if (parentNode && editor.schema.getBlockElements()[parentNode.name] && shouldSplitBlock$1()) {\n                parentNode.type = 3;\n                parentNode.value = separatorHtml;\n                parentNode.raw = true;\n                node.remove();\n                continue;\n              }\n              node.type = 3;\n              node.value = separatorHtml;\n              node.raw = true;\n            }\n          }\n        });\n      });\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mcePageBreak', () => {\n        editor.insertContent(getPlaceholderHtml(shouldSplitBlock(editor)));\n      });\n    };\n\n    const setup = editor => {\n      editor.on('ResolveName', e => {\n        if (e.target.nodeName === 'IMG' && editor.dom.hasClass(e.target, pageBreakClass)) {\n          e.name = 'pagebreak';\n        }\n      });\n    };\n\n    const register = editor => {\n      const onAction = () => editor.execCommand('mcePageBreak');\n      editor.ui.registry.addButton('pagebreak', {\n        icon: 'page-break',\n        tooltip: 'Page break',\n        onAction\n      });\n      editor.ui.registry.addMenuItem('pagebreak', {\n        text: 'Page break',\n        icon: 'page-break',\n        onAction\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('pagebreak', editor => {\n        register$2(editor);\n        register$1(editor);\n        register(editor);\n        setup$1(editor);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n", "// Exports the \"pagebreak\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/pagebreak')\n//   ES2015:\n//     import 'tinymce/plugins/pagebreak'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/pagebreak/index.js\");"],
  "mappings": "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",
  "names": ["shouldSplitBlock"]
}
