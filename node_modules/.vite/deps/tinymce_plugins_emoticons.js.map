{
  "version": 3,
  "sources": ["../../tinymce/plugins/emoticons/plugin.js", "../../tinymce/plugins/emoticons/index.js", "dep:tinymce_plugins_emoticons"],
  "sourcesContent": ["/**\n * TinyMCE version 6.2.0 (2022-09-08)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const eq = t => a => t === a;\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n\n    const noop = () => {\n    };\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const map$1 = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const last = (fn, rate) => {\n      let timer = null;\n      const cancel = () => {\n        if (!isNull(timer)) {\n          clearTimeout(timer);\n          timer = null;\n        }\n      };\n      const throttle = (...args) => {\n        cancel();\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      };\n      return {\n        cancel,\n        throttle\n      };\n    };\n\n    const insertEmoticon = (editor, ch) => {\n      editor.insertContent(ch);\n    };\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const map = (obj, f) => {\n      return tupleMap(obj, (x, i) => ({\n        k: i,\n        v: f(x, i)\n      }));\n    };\n    const tupleMap = (obj, f) => {\n      const r = {};\n      each(obj, (x, i) => {\n        const tuple = f(x, i);\n        r[tuple.k] = tuple.v;\n      });\n      return r;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const shallow = (old, nu) => {\n      return nu;\n    };\n    const baseMerge = merger => {\n      return (...objects) => {\n        if (objects.length === 0) {\n          throw new Error(`Can't merge zero objects`);\n        }\n        const ret = {};\n        for (let j = 0; j < objects.length; j++) {\n          const curObject = objects[j];\n          for (const key in curObject) {\n            if (has(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n        return ret;\n      };\n    };\n    const merge = baseMerge(shallow);\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const value = () => {\n      const subject = singleton(noop);\n      const on = f => subject.get().each(f);\n      return {\n        ...subject,\n        on\n      };\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n      const idx = str.indexOf(substr, start);\n      if (idx !== -1) {\n        return isUndefined(end) ? true : idx + substr.length <= end;\n      } else {\n        return false;\n      }\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Resource');\n\n    const DEFAULT_ID = 'tinymce.plugins.emoticons';\n    const option = name => editor => editor.options.get(name);\n    const register$2 = (editor, pluginUrl) => {\n      const registerOption = editor.options.register;\n      registerOption('emoticons_database', {\n        processor: 'string',\n        default: 'emojis'\n      });\n      registerOption('emoticons_database_url', {\n        processor: 'string',\n        default: `${ pluginUrl }/js/${ getEmojiDatabase(editor) }${ editor.suffix }.js`\n      });\n      registerOption('emoticons_database_id', {\n        processor: 'string',\n        default: DEFAULT_ID\n      });\n      registerOption('emoticons_append', {\n        processor: 'object',\n        default: {}\n      });\n      registerOption('emoticons_images_url', {\n        processor: 'string',\n        default: 'https://twemoji.maxcdn.com/v/13.0.1/72x72/'\n      });\n    };\n    const getEmojiDatabase = option('emoticons_database');\n    const getEmojiDatabaseUrl = option('emoticons_database_url');\n    const getEmojiDatabaseId = option('emoticons_database_id');\n    const getAppendedEmoji = option('emoticons_append');\n    const getEmojiImageUrl = option('emoticons_images_url');\n\n    const ALL_CATEGORY = 'All';\n    const categoryNameMap = {\n      symbols: 'Symbols',\n      people: 'People',\n      animals_and_nature: 'Animals and Nature',\n      food_and_drink: 'Food and Drink',\n      activity: 'Activity',\n      travel_and_places: 'Travel and Places',\n      objects: 'Objects',\n      flags: 'Flags',\n      user: 'User Defined'\n    };\n    const translateCategory = (categories, name) => has(categories, name) ? categories[name] : name;\n    const getUserDefinedEmoji = editor => {\n      const userDefinedEmoticons = getAppendedEmoji(editor);\n      return map(userDefinedEmoticons, value => ({\n        keywords: [],\n        category: 'user',\n        ...value\n      }));\n    };\n    const initDatabase = (editor, databaseUrl, databaseId) => {\n      const categories = value();\n      const all = value();\n      const emojiImagesUrl = getEmojiImageUrl(editor);\n      const getEmoji = lib => {\n        if (startsWith(lib.char, '<img')) {\n          return lib.char.replace(/src=\"([^\"]+)\"/, (match, url) => `src=\"${ emojiImagesUrl }${ url }\"`);\n        } else {\n          return lib.char;\n        }\n      };\n      const processEmojis = emojis => {\n        const cats = {};\n        const everything = [];\n        each(emojis, (lib, title) => {\n          const entry = {\n            title,\n            keywords: lib.keywords,\n            char: getEmoji(lib),\n            category: translateCategory(categoryNameMap, lib.category)\n          };\n          const current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n          cats[entry.category] = current.concat([entry]);\n          everything.push(entry);\n        });\n        categories.set(cats);\n        all.set(everything);\n      };\n      editor.on('init', () => {\n        global.load(databaseId, databaseUrl).then(emojis => {\n          const userEmojis = getUserDefinedEmoji(editor);\n          processEmojis(merge(emojis, userEmojis));\n        }, err => {\n          console.log(`Failed to load emojis: ${ err }`);\n          categories.set({});\n          all.set([]);\n        });\n      });\n      const listCategory = category => {\n        if (category === ALL_CATEGORY) {\n          return listAll();\n        }\n        return categories.get().bind(cats => Optional.from(cats[category])).getOr([]);\n      };\n      const listAll = () => all.get().getOr([]);\n      const listCategories = () => [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n      const waitForLoad = () => {\n        if (hasLoaded()) {\n          return Promise.resolve(true);\n        } else {\n          return new Promise((resolve, reject) => {\n            let numRetries = 15;\n            const interval = setInterval(() => {\n              if (hasLoaded()) {\n                clearInterval(interval);\n                resolve(true);\n              } else {\n                numRetries--;\n                if (numRetries < 0) {\n                  console.log('Could not load emojis from url: ' + databaseUrl);\n                  clearInterval(interval);\n                  reject(false);\n                }\n              }\n            }, 100);\n          });\n        }\n      };\n      const hasLoaded = () => categories.isSet() && all.isSet();\n      return {\n        listCategories,\n        hasLoaded,\n        waitForLoad,\n        listAll,\n        listCategory\n      };\n    };\n\n    const emojiMatches = (emoji, lowerCasePattern) => contains(emoji.title.toLowerCase(), lowerCasePattern) || exists(emoji.keywords, k => contains(k.toLowerCase(), lowerCasePattern));\n    const emojisFrom = (list, pattern, maxResults) => {\n      const matches = [];\n      const lowerCasePattern = pattern.toLowerCase();\n      const reachedLimit = maxResults.fold(() => never, max => size => size >= max);\n      for (let i = 0; i < list.length; i++) {\n        if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n          matches.push({\n            value: list[i].char,\n            text: list[i].title,\n            icon: list[i].char\n          });\n          if (reachedLimit(matches.length)) {\n            break;\n          }\n        }\n      }\n      return matches;\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, database) => {\n      const initialState = {\n        pattern: '',\n        results: emojisFrom(database.listAll(), '', Optional.some(300))\n      };\n      const currentTab = Cell(ALL_CATEGORY);\n      const scan = dialogApi => {\n        const dialogData = dialogApi.getData();\n        const category = currentTab.get();\n        const candidates = database.listCategory(category);\n        const results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n        dialogApi.setData({ results });\n      };\n      const updateFilter = last(dialogApi => {\n        scan(dialogApi);\n      }, 200);\n      const searchField = {\n        label: 'Search',\n        type: 'input',\n        name: patternName\n      };\n      const resultsField = {\n        type: 'collection',\n        name: 'results'\n      };\n      const getInitialState = () => {\n        const body = {\n          type: 'tabpanel',\n          tabs: map$1(database.listCategories(), cat => ({\n            title: cat,\n            name: cat,\n            items: [\n              searchField,\n              resultsField\n            ]\n          }))\n        };\n        return {\n          title: 'Emojis',\n          size: 'normal',\n          body,\n          initialData: initialState,\n          onTabChange: (dialogApi, details) => {\n            currentTab.set(details.newTabName);\n            updateFilter.throttle(dialogApi);\n          },\n          onChange: updateFilter.throttle,\n          onAction: (dialogApi, actionData) => {\n            if (actionData.name === 'results') {\n              insertEmoticon(editor, actionData.value);\n              dialogApi.close();\n            }\n          },\n          buttons: [{\n              type: 'cancel',\n              text: 'Close',\n              primary: true\n            }]\n        };\n      };\n      const dialogApi = editor.windowManager.open(getInitialState());\n      dialogApi.focus(patternName);\n      if (!database.hasLoaded()) {\n        dialogApi.block('Loading emojis...');\n        database.waitForLoad().then(() => {\n          dialogApi.redial(getInitialState());\n          updateFilter.throttle(dialogApi);\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        }).catch(_err => {\n          dialogApi.redial({\n            title: 'Emojis',\n            body: {\n              type: 'panel',\n              items: [{\n                  type: 'alertbanner',\n                  level: 'error',\n                  icon: 'warning',\n                  text: 'Could not load emojis'\n                }]\n            },\n            buttons: [{\n                type: 'cancel',\n                text: 'Close',\n                primary: true\n              }],\n            initialData: {\n              pattern: '',\n              results: []\n            }\n          });\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        });\n      }\n    };\n\n    const register$1 = (editor, database) => {\n      editor.addCommand('mceEmoticons', () => open(editor, database));\n    };\n\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addAttributeFilter('data-emoticon', nodes => {\n          each$1(nodes, node => {\n            node.attr('data-mce-resize', 'false');\n            node.attr('data-mce-placeholder', '1');\n          });\n        });\n      });\n    };\n\n    const init = (editor, database) => {\n      editor.ui.registry.addAutocompleter('emoticons', {\n        trigger: ':',\n        columns: 'auto',\n        minChars: 2,\n        fetch: (pattern, maxResults) => database.waitForLoad().then(() => {\n          const candidates = database.listAll();\n          return emojisFrom(candidates, pattern, Optional.some(maxResults));\n        }),\n        onAction: (autocompleteApi, rng, value) => {\n          editor.selection.setRng(rng);\n          editor.insertContent(value);\n          autocompleteApi.hide();\n        }\n      });\n    };\n\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceEmoticons');\n      editor.ui.registry.addButton('emoticons', {\n        tooltip: 'Emojis',\n        icon: 'emoji',\n        onAction\n      });\n      editor.ui.registry.addMenuItem('emoticons', {\n        text: 'Emojis...',\n        icon: 'emoji',\n        onAction\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('emoticons', (editor, pluginUrl) => {\n        register$2(editor, pluginUrl);\n        const databaseUrl = getEmojiDatabaseUrl(editor);\n        const databaseId = getEmojiDatabaseId(editor);\n        const database = initDatabase(editor, databaseUrl, databaseId);\n        register$1(editor, database);\n        register(editor);\n        init(editor, database);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n", "// Exports the \"emoticons\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/emoticons')\n//   ES2015:\n//     import 'tinymce/plugins/emoticons'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/emoticons/index.js\");"],
  "mappings": "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",
  "names": ["value", "dialogApi"]
}
